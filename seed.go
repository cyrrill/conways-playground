package main

import (
	"fmt"
	"math/rand"
)

type Seed struct {
	x int
	y int
	bits [][]int
}

var blinker = Seed{
	x: 3,
	y: 3,
	bits: [][]int{
		{0,0,0},
		{1,1,1},
		{0,0,0},
	},
}

var toad = Seed{
	x: 4,
	y: 4,
	bits: [][]int{
		{0,0,0,0},
		{0,1,1,1},
		{1,1,1,0},
		{0,0,0,0},
	},
}

var glider = Seed{
	x: 3,
	y: 3,
	bits: [][]int{
		{0,1,0},
		{0,0,1},
		{1,1,1},
	},
}

var gosperGun = Seed{
	x: 38,
	y: 11,
	bits: [][]int{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
		{0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	},
}

var copperHead = Seed{
	x: 12,
	y: 15,
	bits: [][]int{
		{0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,1,1,0,0,0,0,0},
		{0,0,0,0,1,1,1,1,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,1,1,1,1,1,1,0,0,0},
		{0,0,0,0,1,1,1,1,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,1,1,0,0,1,1,0,0,0},
		{0,1,1,0,1,0,0,1,0,1,1,0},
		{0,0,0,0,1,0,0,1,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,1,1,0,0,0,0,0},
		{0,0,0,0,0,1,1,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0},
	},
}

func setSeed(name string) {
	if name == "" {
		return
	}
	seeds := map[string]Seed {
		"blinker": blinker,
		"toad": toad,
		"glider": glider,
		"gosper": gosperGun,
		"copper": copperHead,
	}
	seed := seeds[name]
	y := seed.y
	byi := (B/2) - (seed.y/2)
	x := seed.x
	bxi := (B/2) - (seed.x/2)

	fmt.Printf("name: %s, y: %d, x: %d, byi: %d, bxi: %d", name, y, x, byi, bxi)

	for i := 0; i < y; i++ {
		for j := 0; j < x; j++ {
			by := byi + i
			bx := bxi + j
			board[by][bx] = seed.bits[i][j]
		}
	}
}

func randomizeSeed(count int) {
	min := 1
    max := B - 1
	for i := 0; i < count; i++ {
    	x := rand.Intn(max - min) + min
		y := rand.Intn(max - min) + min
		board[y][x] = 1
	}
}